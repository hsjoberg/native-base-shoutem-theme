{"version":3,"sources":["../../src/StyleProvider.js"],"names":["NativeBaseContext","React","createContext","Context","fixTheme","theme","Theme"],"mappings":"yDAAA,4B;AACA,qC;AACA,8B;AACA,gE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,GAAMA,mBAAoBC,gBAAMC,aAAN,EAA1B,C;AACe;AACbC,QAASH,iBADI;AAEbI,SAAU,kBAAUC,KAAV,CAAiB;AACzB,MAAO,IAAIC,gBAAJ,CAAUD,KAAV,CAAP;AACD,CAJY,C","file":"StyleProvider.js","sourcesContent":["import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport Theme, { ThemeShape } from './Theme';\nimport normalizeStyle from './StyleNormalizer/normalizeStyle';\n\n/**\n *  Provides a theme to child components trough context.\n */\n// export default class StyleProvider extends React.Component {\n//   static propTypes = {\n//     children: PropTypes.element.isRequired,\n//     style: PropTypes.object,\n//   };\n\n//   static defaultProps = {\n//     style: {},\n//   };\n\n//   static childContextTypes = {\n//     theme: ThemeShape.isRequired,\n//   };\n\n//   constructor(props, context) {\n//     super(props, context);\n//     this.state = {\n//       theme: this.createTheme(props),\n//     };\n//   }\n\n//   getChildContext() {\n//     return {\n//       theme: this.state.theme,\n//     };\n//   }\n\n//   UNSAFE_componentWillReceiveProps(nextProps) {\n//     if (nextProps.style !== this.props.style) {\n//       this.setState({\n//         theme: this.createTheme(nextProps),\n//       });\n//     }\n//   }\n\n//   createTheme(props) {\n//     return new Theme(props.style);\n//   }\n\n//   render() {\n//     const { children } = this.props;\n\n//     return Children.only(children);\n//   }\n// }\n\n\nconst NativeBaseContext = React.createContext();\nexport default {\n  Context: NativeBaseContext,\n  fixTheme: function (theme) {\n    return new Theme(theme);\n  }\n}\n"]}