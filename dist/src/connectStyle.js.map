{"version":3,"sources":["../../src/connectStyle.js"],"names":["clearThemeCache","_","themeCache","throwConnectStyleError","errorMessage","componentDisplayName","Error","getTheme","context","theme","Theme","getDefaultTheme","isStyleVariant","propertyName","test","isChildStyle","getConcreteStyle","style","pickBy","value","key","componentStyleName","componentStyle","mapPropsToStyleNames","options","getComponentDisplayName","WrappedComponent","displayName","name","wrapWithStyledComponent","isPlainObject","isString","StyledComponent","props","styleNames","getStyleNames","finalStyle","getFinalStyle","setWrappedInstance","bind","resolveConnectedComponentStyle","state","addedProps","resolveAddedProps","resolvedStyle","parentPath","getOrSetStylesInCache","resolveStyle","concreteStyle","merge","isArray","styleNamesArr","map","remove","index","nextProps","nextContext","shouldRebuildStyle","setState","nativeProps","wrappedInstance","setNativeProps","component","_root","isEqual","styleName","hasStyleNameChanged","split","uniq","withRef","ref","path","join","Object","keys","length","parentStyle","themeStyle","createComponentStyle","resolveStyleNames","getParentPath","React","Component","contextType","StyleProvider","Context","propTypes","PropTypes","oneOfType","object","number","array","string","virtual","bool","defaultProps"],"mappings":"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","file":"connectStyle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as _ from 'lodash';\nimport normalizeStyle from './StyleNormalizer/normalizeStyle';\nimport { StyleSheet } from \"react-native\";\n\nimport Theme, { ThemeShape } from \"./Theme\";\nimport { resolveComponentStyle } from \"./resolveComponentStyle\";\nimport StyleProvider from './StyleProvider';\n\nlet themeCache = {};\n\n/**\n * clear theme cache\n * @export\n */\nexport function clearThemeCache() {\n  themeCache = {};\n}\n\n/**\n * Formats and throws an error when connecting component style with the theme.\n *\n * @param errorMessage The error message.\n * @param componentDisplayName The name of the component that is being connected.\n */\nfunction throwConnectStyleError(errorMessage, componentDisplayName) {\n  throw Error(\n    `${errorMessage} - when connecting ${componentDisplayName} component to style.`\n  );\n}\n\n/**\n * Returns the theme object from the provided context,\n * or an empty theme if the context doesn't contain a theme.\n *\n * @param context The React component context.\n * @returns {Theme} The Theme object.\n */\nfunction getTheme(context) {\n  // Fallback to a default theme if the component isn't\n  // rendered in a StyleProvider.\n  return context.theme || Theme.getDefaultTheme();\n}\n\n/**\n * Matches any style properties that represent component style variants.\n * Those styles can be applied to the component by using the styleName\n * prop. All style variant property names must start with a single '.'\n * character, e.g., '.variant'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\n */\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\n/**\n * Matches any style properties that represent style rules that target the\n * component children. Those styles can have two formats, they can either\n * target the components by component name ('shoutem.ui.Text'), or by component\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\n * component name, those styles can also target any component by using the\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\n * that they have to contain a '.' character in their name or be a '*'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a child style, false otherwise.\n */\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\nfunction getConcreteStyle(style) {\n  return _.pickBy(style, (value, key) => {\n    return !isStyleVariant(key) && !isChildStyle(key);\n  });\n}\n\n/**\n * Resolves the final component style by using the theme style, if available and\n * merging it with the style provided directly through the style prop, and style\n * variants applied through the styleName prop.\n *\n * @param componentStyleName The component name that will be used\n * to target this component in style rules.\n * @param componentStyle The default component style.\n * @param mapPropsToStyleNames Pure function to customize styleNames depending on props.\n * @param options The additional connectStyle options\n * @param options.virtual The default value of the virtual prop\n * @param options.withRef Create component ref with addedProps; if true, ref name is wrappedInstance\n * @returns {StyledComponent} The new component that will handle\n * the styling of the wrapped component.\n */\nexport default (\n  componentStyleName,\n  componentStyle = {},\n  mapPropsToStyleNames,\n  options = {}\n) => {\n  function getComponentDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n  }\n\n  return function wrapWithStyledComponent(WrappedComponent) {\n    const componentDisplayName = getComponentDisplayName(WrappedComponent);\n\n    if (!_.isPlainObject(componentStyle)) {\n      throwConnectStyleError(\n        \"Component style must be plain object\",\n        componentDisplayName\n      );\n    }\n\n    if (!_.isString(componentStyleName)) {\n      throwConnectStyleError(\n        \"Component Style Name must be string\",\n        componentDisplayName\n      );\n    }\n\n    class StyledComponent extends React.Component {\n      static contextType = StyleProvider.Context;\n\n      static propTypes = {\n        // Element style that overrides any other style of the component\n        style: PropTypes.oneOfType([\n          PropTypes.object,\n          PropTypes.number,\n          PropTypes.array\n        ]),\n        // The style variant names to apply to this component,\n        // multiple variants may be separated with a space character\n        styleName: PropTypes.string,\n        // Virtual elements will propagate the parent\n        // style to their children, i.e., the children\n        // will behave as they are placed directly below\n        // the parent of a virtual element.\n        virtual: PropTypes.bool\n      };\n\n      static defaultProps = {\n        virtual: options.virtual\n      };\n\n      static displayName = `Styled(${componentDisplayName})`;\n      static WrappedComponent = WrappedComponent;\n\n      constructor(props, context) {\n        super(props, context);\n        // console.log(context.parentPath);\n        const styleNames = this.getStyleNames(props);\n        const style = props.style;\n\n        const finalStyle = this.getFinalStyle(\n          props,\n          context,\n          style,\n          styleNames\n        );\n\n        this.setWrappedInstance = this.setWrappedInstance.bind(this);\n        this.resolveConnectedComponentStyle = this.resolveConnectedComponentStyle.bind(\n          this\n        );\n        this.state = {\n          style: finalStyle,\n          // AddedProps are additional WrappedComponent props\n          // Usually they are set trough alternative ways,\n          // such as theme style, or trough options\n          addedProps: this.resolveAddedProps(),\n          styleNames\n        };\n      }\n\n      getFinalStyle(props, context, style, styleNames) {\n        let resolvedStyle = {};\n        if (context.parentPath) {\n          resolvedStyle = this.getOrSetStylesInCache(\n            context,\n            props,\n            styleNames,\n            [...context.parentPath, componentStyleName, ...styleNames]\n          );\n        } else {\n          resolvedStyle = this.resolveStyle(context, props, styleNames);\n          themeCache[componentStyleName] = resolvedStyle;\n        }\n\n        const concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));\n\n        if (_.isArray(style)) {\n          return [concreteStyle, ...style];\n        }\n\n        if (typeof style == \"number\" || typeof style == \"object\") {\n          return [concreteStyle, style];\n        }\n\n        return concreteStyle;\n      }\n\n      getStyleNames(props) {\n        const styleNamesArr = _.map(props, (value, key) => {\n          if (typeof value !== \"object\" && value === true) {\n            return \".\" + key;\n          } else {\n            return false;\n          }\n        });\n        _.remove(styleNamesArr, (value, index) => {\n          return value === false;\n        });\n\n        return styleNamesArr;\n      }\n\n      getParentPath() {\n        if (!this.context.parentPath) {\n          return [componentStyleName];\n        } else {\n          return [\n            ...this.context.parentPath,\n            componentStyleName,\n            ...this.getStyleNames(this.props)\n          ];\n        }\n      }\n\n      UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n        const styleNames = this.getStyleNames(nextProps);\n        const style = nextProps.style;\n        if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {\n          const finalStyle = this.getFinalStyle(\n            nextProps,\n            nextContext,\n            style,\n            styleNames\n          );\n\n          this.setState({\n            style: finalStyle,\n            // childrenStyle: resolvedStyle.childrenStyle,\n            styleNames\n          });\n        }\n      }\n\n      setNativeProps(nativeProps) {\n        if (this.wrappedInstance.setNativeProps) {\n          this.wrappedInstance.setNativeProps(nativeProps);\n        }\n      }\n\n      setWrappedInstance(component) {\n        if (component && component._root) {\n          this._root = component._root;\n        } else {\n          this._root = component;\n        }\n        this.wrappedInstance = this._root;\n      }\n\n      hasStyleNameChanged(nextProps, styleNames) {\n        return (\n          mapPropsToStyleNames &&\n          this.props !== nextProps &&\n          // Even though props did change here,\n          // it doesn't necessary means changed props are those which affect styleName\n          !_.isEqual(this.state.styleNames, styleNames)\n        );\n      }\n\n      shouldRebuildStyle(nextProps, nextContext, styleNames) {\n        return (\n          nextProps.style !== this.props.style ||\n          nextProps.styleName !== this.props.styleName ||\n          nextContext.theme !== this.context.theme ||\n          !_.isEqual(nextContext.parentPath, this.context.parentPath) ||\n          this.hasStyleNameChanged(nextProps, styleNames)\n        );\n      }\n\n      resolveStyleNames(props) {\n        const { styleName } = props;\n        const styleNames = styleName ? styleName.split(/\\s/g) : [];\n\n        if (!mapPropsToStyleNames) {\n          return styleNames;\n        }\n\n        // We only want to keep the unique style names\n        return _.uniq(mapPropsToStyleNames(styleNames, props));\n      }\n\n      resolveAddedProps() {\n        const addedProps = {};\n        if (options.withRef) {\n          addedProps.ref = \"wrappedInstance\";\n        }\n        return addedProps;\n      }\n\n      getOrSetStylesInCache(context, props, styleNames, path) {\n        if (themeCache && themeCache[path.join(\">\")]) {\n          // console.log('**************');\n\n          return themeCache[path.join(\">\")];\n        } else {\n          const resolvedStyle = this.resolveStyle(context, props, styleNames);\n          if (Object.keys(themeCache).length < 10000) {\n            themeCache[path.join(\">\")] = resolvedStyle;\n          }\n          return resolvedStyle;\n        }\n      }\n\n      resolveStyle(context, props, styleNames) {\n        let parentStyle = {};\n\n        const theme = getTheme(context);\n        const themeStyle = theme.createComponentStyle(\n          componentStyleName,\n          componentStyle\n        );\n\n        if (context.parentPath) {\n          parentStyle = themeCache[context.parentPath.join(\">\")];\n        } else {\n          parentStyle = resolveComponentStyle(\n            componentStyleName,\n            styleNames,\n            themeStyle,\n            parentStyle\n          );\n        }\n\n        return resolveComponentStyle(\n          componentStyleName,\n          styleNames,\n          themeStyle,\n          parentStyle\n        );\n      }\n\n      /**\n       * A helper function provided to child components that enables\n       * them to resolve their style for any set of prop values.\n       *\n       * @param props The component props to use to resolve the style values.\n       * @returns {*} The resolved component style.\n       */\n      resolveConnectedComponentStyle(props) {\n        const styleNames = this.resolveStyleNames(props);\n        return this.resolveStyle(this.context, props, styleNames)\n          .componentStyle;\n      }\n\n      render() {\n        // console.log('themeCache', themeCache);\n\n        // if(componentStyleName == 'NativeBase.Text') {\n        //   console.log(this.state.style);\n        //   console.log(themeCache);\n        // }\n\n        const { addedProps, style } = this.state;\n        return (\n          <StyleProvider.Context.Provider value={{\n            ...this.context,\n            parentPath: this.getParentPath()\n          }}>\n            <WrappedComponent\n              {...this.props}\n              {...addedProps}\n              style={style}\n              ref={this.setWrappedInstance}\n            />\n\n          </StyleProvider.Context.Provider>\n        );\n      }\n    }\n\n    return hoistStatics(StyledComponent, WrappedComponent);\n  };\n};\n"]}